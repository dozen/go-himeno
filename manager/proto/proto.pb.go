// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

/*
Package manager is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	StatsReq
	StatsRes
	Node
	StartReq
	StartRes
	JoinReq
	JoinRes
	JobReq
	JobRes
	KickReq
	KickRes
*/
package manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatsReq struct {
}

func (m *StatsReq) Reset()                    { *m = StatsReq{} }
func (m *StatsReq) String() string            { return proto.CompactTextString(m) }
func (*StatsReq) ProtoMessage()               {}
func (*StatsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatsRes struct {
	NodeList []*Node `protobuf:"bytes,1,rep,name=nodeList" json:"nodeList,omitempty"`
}

func (m *StatsRes) Reset()                    { *m = StatsRes{} }
func (m *StatsRes) String() string            { return proto.CompactTextString(m) }
func (*StatsRes) ProtoMessage()               {}
func (*StatsRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatsRes) GetNodeList() []*Node {
	if m != nil {
		return m.NodeList
	}
	return nil
}

type Node struct {
	Status    string  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Address   string  `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Score     float64 `protobuf:"fixed64,3,opt,name=score" json:"score,omitempty"`
	LinkSpeed int64   `protobuf:"varint,4,opt,name=link_speed,json=linkSpeed" json:"link_speed,omitempty"`
	Job       *JobRes `protobuf:"bytes,5,opt,name=job" json:"job,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Node) GetLinkSpeed() int64 {
	if m != nil {
		return m.LinkSpeed
	}
	return 0
}

func (m *Node) GetJob() *JobRes {
	if m != nil {
		return m.Job
	}
	return nil
}

type StartReq struct {
}

func (m *StartReq) Reset()                    { *m = StartReq{} }
func (m *StartReq) String() string            { return proto.CompactTextString(m) }
func (*StartReq) ProtoMessage()               {}
func (*StartReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StartRes struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *StartRes) Reset()                    { *m = StartRes{} }
func (m *StartRes) String() string            { return proto.CompactTextString(m) }
func (*StartRes) ProtoMessage()               {}
func (*StartRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StartRes) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type JoinReq struct {
	Addr      string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Score     float64 `protobuf:"fixed64,2,opt,name=score" json:"score,omitempty"`
	LinkSpeed int64   `protobuf:"varint,3,opt,name=link_speed,json=linkSpeed" json:"link_speed,omitempty"`
}

func (m *JoinReq) Reset()                    { *m = JoinReq{} }
func (m *JoinReq) String() string            { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()               {}
func (*JoinReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JoinReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *JoinReq) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *JoinReq) GetLinkSpeed() int64 {
	if m != nil {
		return m.LinkSpeed
	}
	return 0
}

type JoinRes struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *JoinRes) Reset()                    { *m = JoinRes{} }
func (m *JoinRes) String() string            { return proto.CompactTextString(m) }
func (*JoinRes) ProtoMessage()               {}
func (*JoinRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JoinRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type JobReq struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *JobReq) Reset()                    { *m = JobReq{} }
func (m *JobReq) String() string            { return proto.CompactTextString(m) }
func (*JobReq) ProtoMessage()               {}
func (*JobReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *JobReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type JobRes struct {
	Size          string `protobuf:"bytes,1,opt,name=size" json:"size,omitempty"`
	Left          int64  `protobuf:"varint,2,opt,name=left" json:"left,omitempty"`
	Right         int64  `protobuf:"varint,3,opt,name=right" json:"right,omitempty"`
	LeftNeighbor  string `protobuf:"bytes,4,opt,name=left_neighbor,json=leftNeighbor" json:"left_neighbor,omitempty"`
	RightNeighbor string `protobuf:"bytes,5,opt,name=right_neighbor,json=rightNeighbor" json:"right_neighbor,omitempty"`
}

func (m *JobRes) Reset()                    { *m = JobRes{} }
func (m *JobRes) String() string            { return proto.CompactTextString(m) }
func (*JobRes) ProtoMessage()               {}
func (*JobRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *JobRes) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *JobRes) GetLeft() int64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *JobRes) GetRight() int64 {
	if m != nil {
		return m.Right
	}
	return 0
}

func (m *JobRes) GetLeftNeighbor() string {
	if m != nil {
		return m.LeftNeighbor
	}
	return ""
}

func (m *JobRes) GetRightNeighbor() string {
	if m != nil {
		return m.RightNeighbor
	}
	return ""
}

type KickReq struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *KickReq) Reset()                    { *m = KickReq{} }
func (m *KickReq) String() string            { return proto.CompactTextString(m) }
func (*KickReq) ProtoMessage()               {}
func (*KickReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *KickReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type KickRes struct {
}

func (m *KickRes) Reset()                    { *m = KickRes{} }
func (m *KickRes) String() string            { return proto.CompactTextString(m) }
func (*KickRes) ProtoMessage()               {}
func (*KickRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*StatsReq)(nil), "manager.StatsReq")
	proto.RegisterType((*StatsRes)(nil), "manager.StatsRes")
	proto.RegisterType((*Node)(nil), "manager.Node")
	proto.RegisterType((*StartReq)(nil), "manager.StartReq")
	proto.RegisterType((*StartRes)(nil), "manager.StartRes")
	proto.RegisterType((*JoinReq)(nil), "manager.JoinReq")
	proto.RegisterType((*JoinRes)(nil), "manager.JoinRes")
	proto.RegisterType((*JobReq)(nil), "manager.JobReq")
	proto.RegisterType((*JobRes)(nil), "manager.JobRes")
	proto.RegisterType((*KickReq)(nil), "manager.KickReq")
	proto.RegisterType((*KickRes)(nil), "manager.KickRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	// for CLI
	Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsRes, error)
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartRes, error)
	// for Worker
	Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRes, error)
	Job(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*JobRes, error)
	Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*KickRes, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsRes, error) {
	out := new(StatsRes)
	err := grpc.Invoke(ctx, "/manager.Manager/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartRes, error) {
	out := new(StartRes)
	err := grpc.Invoke(ctx, "/manager.Manager/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Join(ctx context.Context, in *JoinReq, opts ...grpc.CallOption) (*JoinRes, error) {
	out := new(JoinRes)
	err := grpc.Invoke(ctx, "/manager.Manager/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Job(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*JobRes, error) {
	out := new(JobRes)
	err := grpc.Invoke(ctx, "/manager.Manager/Job", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Kick(ctx context.Context, in *KickReq, opts ...grpc.CallOption) (*KickRes, error) {
	out := new(KickRes)
	err := grpc.Invoke(ctx, "/manager.Manager/Kick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	// for CLI
	Stats(context.Context, *StatsReq) (*StatsRes, error)
	Start(context.Context, *StartReq) (*StartRes, error)
	// for Worker
	Join(context.Context, *JoinReq) (*JoinRes, error)
	Job(context.Context, *JobReq) (*JobRes, error)
	Kick(context.Context, *KickReq) (*KickRes, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Stats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Join(ctx, req.(*JoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Job_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Job(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/Job",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Job(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.Manager/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Kick(ctx, req.(*KickReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Manager_Stats_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Manager_Start_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Manager_Join_Handler,
		},
		{
			MethodName: "Job",
			Handler:    _Manager_Job_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _Manager_Kick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0xd6, 0x76, 0x1c, 0x4f, 0x08, 0x97, 0x15, 0x42, 0x96, 0x45, 0x25, 0xb3, 0x15, 0x92,
	0x2b, 0xa1, 0x20, 0x05, 0xf1, 0x13, 0x01, 0xfa, 0xb0, 0xfd, 0x80, 0xca, 0x97, 0x25, 0x35, 0x2d,
	0xde, 0x66, 0x67, 0xfb, 0xc2, 0x57, 0x20, 0x3e, 0x95, 0x2f, 0x40, 0xb3, 0x5e, 0xbb, 0xc1, 0x69,
	0x5e, 0xac, 0x99, 0x73, 0x66, 0xc6, 0x67, 0x2e, 0x0b, 0x8b, 0x7b, 0xa3, 0xad, 0x5e, 0xb9, 0x2f,
	0x8f, 0x7f, 0x96, 0x5d, 0xb9, 0x55, 0x46, 0x00, 0xcc, 0xaf, 0x6c, 0x69, 0x51, 0xaa, 0x9d, 0xf8,
	0x3c, 0xda, 0xc8, 0x2f, 0x60, 0xde, 0xe9, 0x46, 0x7d, 0x6d, 0xd1, 0xa6, 0x2c, 0x0f, 0x8a, 0xc5,
	0x7a, 0xb9, 0xf2, 0x39, 0xab, 0x4b, 0xdd, 0x28, 0x39, 0xd2, 0xe2, 0x37, 0x83, 0x90, 0x20, 0xfe,
	0x06, 0x66, 0x68, 0x4b, 0xfb, 0x80, 0x29, 0xcb, 0x59, 0x91, 0x48, 0xef, 0xf1, 0x14, 0xe2, 0xb2,
	0x69, 0x8c, 0x42, 0x4c, 0x4f, 0x1d, 0x31, 0xb8, 0xfc, 0x35, 0x44, 0x58, 0x6b, 0xa3, 0xd2, 0x20,
	0x67, 0x05, 0x93, 0xbd, 0xc3, 0xcf, 0x00, 0xee, 0xda, 0xee, 0xf6, 0x1a, 0xef, 0x95, 0x6a, 0xd2,
	0x30, 0x67, 0x45, 0x20, 0x13, 0x42, 0xae, 0x08, 0xe0, 0xef, 0x20, 0xf8, 0xa1, 0xab, 0x34, 0xca,
	0x59, 0xb1, 0x58, 0xbf, 0x18, 0x55, 0x6d, 0x74, 0x25, 0x15, 0x4a, 0xe2, 0x7c, 0x57, 0xc6, 0x52,
	0x57, 0x62, 0xb4, 0xf1, 0x98, 0x42, 0x21, 0x21, 0xde, 0xe8, 0xb6, 0x93, 0x6a, 0xc7, 0x39, 0x84,
	0xa4, 0xce, 0x07, 0x38, 0xfb, 0x51, 0xe6, 0xe9, 0x71, 0x99, 0xc1, 0x44, 0xa6, 0x38, 0x1f, 0x6a,
	0xba, 0x01, 0xe0, 0x43, 0x5d, 0xd3, 0x00, 0xa8, 0xec, 0x5c, 0x0e, 0xae, 0x78, 0x0b, 0x33, 0xa7,
	0xfb, 0xc9, 0xff, 0x8a, 0x3f, 0xcc, 0xd3, 0x48, 0x34, 0xb6, 0xbf, 0xd4, 0x40, 0x93, 0x4d, 0xd8,
	0x9d, 0xfa, 0x6e, 0x9d, 0xaa, 0x40, 0x3a, 0x9b, 0xa4, 0x9a, 0x76, 0x7b, 0x63, 0xbd, 0x9e, 0xde,
	0xe1, 0xe7, 0xb0, 0x24, 0xf6, 0xba, 0x53, 0xed, 0xf6, 0xa6, 0xd2, 0xc6, 0x0d, 0x35, 0x91, 0xcf,
	0x08, 0xbc, 0xf4, 0x18, 0x7f, 0x0f, 0xcf, 0x5d, 0xf4, 0x63, 0x54, 0xe4, 0xa2, 0x96, 0x0e, 0x1d,
	0xc2, 0xc4, 0x19, 0xc4, 0x5f, 0xda, 0xfa, 0xf6, 0x98, 0xe6, 0x64, 0xa0, 0x71, 0xfd, 0x97, 0x41,
	0xfc, 0xad, 0xdf, 0x0e, 0xff, 0x08, 0x91, 0xbb, 0x2d, 0xfe, 0x6a, 0x5c, 0xd8, 0x70, 0x77, 0xd9,
	0x01, 0x84, 0xe2, 0xc4, 0x27, 0x18, 0xfb, 0x7f, 0x82, 0x5b, 0x69, 0x76, 0x00, 0x51, 0xc2, 0x07,
	0x08, 0x69, 0xde, 0xfc, 0xe5, 0xde, 0x45, 0xb8, 0x95, 0x66, 0x53, 0x84, 0xa2, 0x2f, 0x20, 0xd8,
	0xe8, 0x8a, 0x4f, 0xce, 0x67, 0x97, 0x4d, 0xef, 0xa9, 0x2f, 0x4c, 0x1d, 0xed, 0x15, 0xf6, 0xfd,
	0x67, 0x53, 0x04, 0xc5, 0x49, 0x35, 0x73, 0x0f, 0xec, 0xd3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x99, 0x67, 0xe6, 0x7a, 0x6f, 0x03, 0x00, 0x00,
}
